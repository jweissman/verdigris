#!/usr/bin/env aura

phi = 3.14

fun body(rank, color)
  baseline = 100
  tau_r = (color[1] + color[2]).to_i(16).to_f / baseline.to_f
  tau_g = (color[3] + color[4]).to_i(16).to_f / baseline.to_f
  tau_b = (color[5] + color[6]).to_i(16).to_f / baseline.to_f
  if rank == 1
    say("Color is ${color}; r: ${tau_r}, g: ${tau_g}, b: ${tau_b}")
  end
  {
    power: (phi * rank) + (tau_r * rank),
    toughness: (phi * rank) + (tau_g * rank),
    abilities: [],
    color: color
  }
end

fun creature_from_body(name, body)
  {
    name: name,
    color: body.color,
    attack: body.power.to_i,
    hp: body.toughness.to_i,
    wins: 0,
    defense: 0  # default baseline
  }
end

classes = ["Knight", "Regent", "Steward", "Rebel", "Rager", "Berserker", "Destroyer"]
adjectives = ["Stalwart", "Zombie", "Hologram", "Diseased"]

fun hero_from_creature(name, creature)
  {
    name: name,
    archetype: classes.sample,
    subtype: adjectives.sample,
    hp: creature.hp,
    max_hp: creature.hp,
    attack: creature.attack,
    defense: creature.defense,
    wins: 0
    # would be nice to have ...creature for coalesce
  }
end

cards = [
  creature_from_body("Pawn", body(1, "#fff")),
  creature_from_body("Brute", body(2, "#fff")),
  creature_from_body("Knight", body(4, "#fff")),
  creature_from_body("King", body(7, "#fff"))
  # hero_from_creature("Algorius", creature_from_body(body(1, '#000'))),
  # hero_from_creature("Tantalus", creature_from_body(body(1, '#ba0494'))),
  # hero_from_creature("Crexas", creature_from_body(body(1, '#a0b0d0'))),
  # { name: 'archon alpha, the noblissimus', hp: 100, attack: 24, defense: 1 },
  # { name: 'prince gulfregon, shield of ambria', hp: 250, attack: 15, defense: 2 },
  # { name: 'tharn kallix, terraqueous worldmage', hp: 50, attack: 8, defense: 1 },
]

fun describe(hero)
  "${hero.name} the ${hero.subtype} ${hero.archetype} (${hero.hp}/${hero.max_hp})"
end


fun fight_one(attacker, defender)
  damage = attacker.attack - defender.defense
  damage = if damage < 0 then 0 else damage
  defender.hp = defender.hp - damage
  # say("${describe(attacker)} hit ${describe(defender)} for ${damage} (at ${defender.hp})")
end

fun fight(red, blue)
  while red.hp > 0 && blue.hp > 0
    fight_one(red, blue)
    if blue.hp > 0
      fight_one(blue, red)
    end
  end
  victor = if red.hp > 0 then red else blue
  say "The winner is ${victor.name}."
  victor
end

fight_count = 100

i = 0
while i < fight_count
  i = i + 1
  # say '=== gathering two simulants from the multiverse ==='
  alpha = cards.sample
  beta = cards.sample
  while beta == alpha
    beta = cards.sample
  end
  victor = fight(alpha.dup, beta.dup)
  if victor == alpha
    alpha.wins = alpha.wins + 1
  else
    beta.wins = beta.wins + 1
  end
end

for fighter in cards do
  say("${fighter.name} - ${fighter.wins}")
end