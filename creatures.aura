#!/usr/bin/env aura

# === CREATURE GENERATION SYSTEM ===
# Generate diverse creatures across White (orderly) and Black (chaotic) factions

phi = 3.14159
tau = 6.28318

# Color palettes for factions
white_colors = ["#ffffff", "#f0f0f0", "#e8e8e8", "#d0d0d0", "#c0c0c0"]
black_colors = ["#000000", "#1a1a1a", "#2a2a2a", "#3a3a3a", "#4a4a4a"]
chaotic_colors = ["#8b0000", "#4b0082", "#008b8b", "#8b4513", "#556b2f"]

# Archetype definitions with their own modifiers
archetypes = {
  "Knight": {
    physical: { power: 0, toughness: 2, agility: 0 },
    mental: { intelligence: 0, cunning: 0, perception: 1 },
    spiritual: { willpower: 1, charisma: 1, faith: 1 }
  },
  "Paladin": {
    physical: { power: 1, toughness: 1, agility: 0 },
    mental: { intelligence: 1, cunning: 0, perception: 1 },
    spiritual: { willpower: 2, charisma: 1, faith: 3 }
  },
  "Guardian": {
    physical: { power: 0, toughness: 3, agility: -1 },
    mental: { intelligence: 0, cunning: 0, perception: 2 },
    spiritual: { willpower: 2, charisma: 0, faith: 1 }
  },
  "Sentinel": {
    physical: { power: 0, toughness: 0, agility: 2 },
    mental: { intelligence: 1, cunning: 1, perception: 3 },
    spiritual: { willpower: 1, charisma: 0, faith: 0 }
  },
  "Crusader": {
    physical: { power: 2, toughness: 0, agility: 0 },
    mental: { intelligence: 0, cunning: 0, perception: 1 },
    spiritual: { willpower: 2, charisma: 1, faith: 2 }
  },
  "Wraith": {
    physical: { power: 0, toughness: -1, agility: 3 },
    mental: { intelligence: 1, cunning: 2, perception: 2 },
    spiritual: { willpower: -2, charisma: -1, faith: -3 }
  },
  "Reaver": {
    physical: { power: 2, toughness: -1, agility: 1 },
    mental: { intelligence: 0, cunning: 2, perception: 1 },
    spiritual: { willpower: 0, charisma: -1, faith: -1 }
  },
  "Shadow": {
    physical: { power: 1, toughness: 0, agility: 2 },
    mental: { intelligence: 1, cunning: 3, perception: 2 },
    spiritual: { willpower: 0, charisma: 1, faith: -1 }
  },
  "Necromancer": {
    physical: { power: 1, toughness: 1, agility: 0 },
    mental: { intelligence: 3, cunning: 2, perception: 1 },
    spiritual: { willpower: 1, charisma: 0, faith: -2 }
  },
  "Cultist": {
    physical: { power: -1, toughness: -1, agility: 0 },
    mental: { intelligence: 0, cunning: 1, perception: 0 },
    spiritual: { willpower: 0, charisma: -1, faith: 2 }
  }
}

# Creature modifiers
adjectives = ["Swift", "Mighty", "Ancient", "Blessed", "Cursed", "Ethereal", "Savage", "Noble"]

# Temperament and terrain type definitions for barred union selection
type Temperament = 'stoic' | 'fierce' | 'cunning' | 'zealous' | 'melancholic' | 'manic'
type Terrain = 'plains' | 'hills' | 'temple' | 'citadel' | 'sanctuary' | 'moors' | 'swamp' | 'wasteland' | 'crypt' | 'shadowlands'

# Legacy array for backwards compatibility
temperaments = ["stoic", "fierce", "cunning", "zealous", "melancholic", "manic"]

# Abilities by faction
white_abilities = ["Heal", "Shield", "Bless", "Rally", "Purify"]
black_abilities = ["Drain", "Curse", "Summon", "Fear", "Decay"]

fun generate_color_stats(color, rank)
  baseline = 255
  red = (color[1] + color[2]).to_i(16)
  green = (color[3] + color[4]).to_i(16)
  blue = (color[5] + color[6]).to_i(16)

  tau_r = red.to_f / baseline.to_f
  tau_g = green.to_f / baseline.to_f
  tau_b = blue.to_f / baseline.to_f

  # Note: could compare stats to get other values?
  # gamma as red vs blue
  # interesting color flags would be metallicity, neon
  # theta could be a hue value if we want that??

  # Generate stats with more variety
  base_power = (phi * rank).to_i
  base_tough = (phi * rank).to_i
  base_agil = (phi * rank).to_i
  
  {
    power: base_power + (tau_r * rank * 2).to_i,
    toughness: base_tough + (tau_g * rank * 3).to_i,
    agility: base_agil + (tau_b * rank * 2).to_i,
    r: red,
    g: green,
    b: blue,
    color: color
  }
end

fun body(archetype, color, rank, body_type)
  stats = generate_color_stats(color, rank)
  
  # Get archetype modifiers from data structure
  arch_data = archetypes[archetype]
  if arch_data
    phys_mods = arch_data["physical"]
    power_mod = phys_mods["power"]
    tough_mod = phys_mods["toughness"] 
    agil_mod = phys_mods["agility"]
  else
    power_mod = 0
    tough_mod = 0
    agil_mod = 0
  end
  
  # Body type modifiers for physical stats
  body_power_mod = 0
  body_tough_mod = 0
  body_agil_mod = 0
  
  if body_type == "brute"
    body_power_mod = 3
    body_tough_mod = 2
    body_agil_mod = -2
  elif body_type == "pixie"
    body_power_mod = -2
    body_tough_mod = -1
    body_agil_mod = 4
  elif body_type == "leviathan"
    body_power_mod = 2
    body_tough_mod = 4
    body_agil_mod = -3
  elif body_type == "titan"
    body_power_mod = 4
    body_tough_mod = 3
    body_agil_mod = -1
  elif body_type == "sprite"
    body_power_mod = -1
    body_tough_mod = 0
    body_agil_mod = 3
  elif body_type == "wraith-form"
    body_power_mod = 0
    body_tough_mod = -2
    body_agil_mod = 2
  elif body_type == "behemoth"
    body_power_mod = 3
    body_tough_mod = 4
    body_agil_mod = -2
  elif body_type == "buyer"
    body_power_mod = 1
    body_tough_mod = 1
    body_agil_mod = 1
  end

  {
    power: stats.power + power_mod + body_power_mod,
    toughness: stats.toughness + tough_mod + body_tough_mod,
    agility: stats.agility + agil_mod + body_agil_mod
  }
end

fun mind(archetype, color, rank)
  base_intel = rank * 2
  base_cunning = rank * 2
  base_perception = rank * 2
  
  # Archetype mental modifiers
  intel_mod = 0
  cunning_mod = 0
  perception_mod = 0
  
  if archetype == "Necromancer"
    intel_mod = 3    # High intelligence
    cunning_mod = 2
  end
  if archetype == "Shadow"
    cunning_mod = 3  # Very cunning
    perception_mod = 2
  end
  if archetype == "Sentinel"
    perception_mod = 3  # High awareness
  end
  if archetype == "Paladin"
    intel_mod = 1
    perception_mod = 1  # Balanced mental stats
  end
  
  {
    intelligence: base_intel + intel_mod,
    cunning: base_cunning + cunning_mod,
    perception: base_perception + perception_mod
  }
end

fun spirit(archetype, color, rank)
  base_will = rank * 2
  base_charisma = rank * 2
  base_faith = rank * 2
  
  # Archetype spiritual modifiers
  will_mod = 0
  charisma_mod = 0
  faith_mod = 0
  
  if archetype == "Paladin"
    faith_mod = 3    # Very faithful
    will_mod = 2
  end
  if archetype == "Crusader"
    faith_mod = 2
    will_mod = 2     # Strong conviction
  end
  if archetype == "Wraith"
    will_mod = -2    # Weakened spirit
    faith_mod = -3
  end
  if archetype == "Cultist"
    faith_mod = 2    # Devoted to dark powers
    charisma_mod = -1
  end
  
  {
    willpower: base_will + will_mod,
    charisma: base_charisma + charisma_mod,
    faith: base_faith + faith_mod
  }
end

fun apply_temperament_modifiers(stats, temperament)
  # Temperament affects creature stats
  if temperament == "fierce"
    # Check if this is physical stats
    if stats.power
      stats.power = stats.power + 2
      stats.agility = stats.agility + 1
    end
    # Check if this is mental stats
    if stats.cunning
      stats.cunning = stats.cunning + 1
    end
    # Check if this is spiritual stats  
    if stats.charisma
      stats.charisma = stats.charisma + 2
    end
  elif temperament == "stoic"
    if stats.toughness
      stats.toughness = stats.toughness + 3
      stats.agility = stats.agility - 1
    end
    if stats.willpower
      stats.willpower = stats.willpower + 3
    end
  elif temperament == "cunning"
    if stats.agility
      stats.agility = stats.agility + 2
    end
    if stats.intelligence
      stats.intelligence = stats.intelligence + 1
      stats.cunning = stats.cunning + 3
      stats.perception = stats.perception + 1
    end
    if stats.faith
      stats.faith = stats.faith - 1
    end
  elif temperament == "zealous"
    if stats.power
      stats.power = stats.power + 1
      stats.toughness = stats.toughness + 1
    end
    if stats.willpower
      stats.willpower = stats.willpower + 2
      stats.charisma = stats.charisma + 1
      stats.faith = stats.faith + 3
    end
  elif temperament == "melancholic"
    if stats.power
      stats.power = stats.power - 1
      stats.toughness = stats.toughness + 1
    end
    if stats.intelligence
      stats.intelligence = stats.intelligence + 2
      stats.cunning = stats.cunning + 1
      stats.perception = stats.perception + 1
    end
    if stats.charisma
      stats.charisma = stats.charisma - 1
      stats.faith = stats.faith + 1
    end
  elif temperament == "manic"
    if stats.power
      stats.power = stats.power + 1
      stats.toughness = stats.toughness - 1
      stats.agility = stats.agility + 2
    end
    if stats.cunning
      stats.cunning = stats.cunning + 2
    end
    if stats.willpower
      stats.willpower = stats.willpower - 1
      stats.charisma = stats.charisma + 2
    end
  end
  
  stats
end

fun generate_creature(colors, archetypes)
  archetype = archetypes.sample
  color = colors.sample
  rank = 1 + rand(5)  # Ranks 1-5
  
  # Add body type selection for more creature variety
  body_types = ["pixie", "brute", "buyer", "leviathan", "wraith-form", "titan", "sprite", "behemoth"]
  body_type = body_types.sample
  
  # Add microfaction and background for more character depth
  microfactions = ["devoted", "rogue", "exile", "champion", "outcast", "elite", "veteran", "novice"]
  microfaction = microfactions.sample
  
  background_traits = ["war-scarred", "mystically-touched", "battle-tested", "shadow-born", "light-blessed", "chaos-marked", "ancient", "feral"]
  background = background_traits.sample
  
  # Brief, controlled temperament selection with more context
  guidelines = "You may only respond with one word from the available options. Do not explain or respond conversationally."
  temperament_prompt = """Select temperament for ${background} ${microfaction} ${archetype} (rank ${rank}): stoic, fierce, cunning, zealous, melancholic, or manic. ${guidelines}"""
  temperament = temperament_prompt ~ Temperament
  
  # Brief, controlled terrain selection
  if white_colors.include(color)
    terrain_prompt = """Select sacred terrain for ${background} ${body_type} ${temperament} ${archetype}: plains, hills, temple, citadel, or sanctuary. ${guidelines}"""
  else
    terrain_prompt = """Select dark terrain for ${background} ${body_type} ${temperament} ${archetype}: moors, swamp, wasteland, crypt, or shadowlands. ${guidelines}"""
  end
  terrain = terrain_prompt ~ Terrain
  
  physical = body(archetype, color, rank, body_type)
  mental = mind(archetype, color, rank)
  spiritual = spirit(archetype, color, rank)
  
  # Add abilities based on rank and faction
  abilities = []
  if rank >= 3
    if white_colors.include(color)
      abilities = abilities + [white_abilities.sample]
    else
      abilities = abilities + [black_abilities.sample]
    end
  end
  if rank >= 5
    # High-rank creatures get a second ability
    if white_colors.include(color)
      abilities = abilities + [white_abilities.sample]
    else
      abilities = abilities + [black_abilities.sample]
    end
  end
  
  # Generate creative names using LLM generative literals with careful prompting
  guidelines = "You may only suggest one name. It must be expressive and suggestive but brief. You do not need to respond conversationally or explain why your example is appropriate. It is very, very, very important to respond only with one word."
  
  # Generate first part with careful prompt structure  
  if white_colors.include(color)
    military_descriptor = """You will be asked to provide one word as a response. Please suggest a single-word prefix for a ${archetype} unit with stats ${physical.power}/${physical.toughness}/${physical.agility}. Examples: Elite, Veteran, Iron, Storm. ${guidelines}"""
  else
    military_descriptor = """You will be asked to provide one word as a response. Please suggest a single-word prefix for a ${archetype} unit with stats ${physical.power}/${physical.toughness}/${physical.agility}. Examples: Dark, Vile, Cursed, Shadow. ${guidelines}"""
  end
  
  flavor_term = """You will be asked to provide one word as a response. Please suggest a single expressive suffix describing a ${background} ${body_type} ${archetype} unit. Examples: Blade, Fang, Wing, Ember. ${guidelines}"""

  unit_name = "${military_descriptor} ${flavor_term}"
  
  # Clean up name using gsub to remove unwanted punctuation
  clean_name = unit_name.gsub(".", "").gsub("\"", "").gsub(",", "")
  faction = if white_colors.include(color) then "White" else "Black"
  
  # Create complete card structure
  card = {
    name: clean_name,
    archetype: archetype,
    body_type: body_type,
    temperament: temperament,
    terrain: terrain,
    microfaction: microfaction,
    background: background,
    rank: rank,
    color: color,
    faction: faction,
    stats: {
      # Physical
      attack: physical.power,
      hp: physical.toughness,
      defense: physical.agility,
      # Mental  
      intelligence: mental.intelligence,
      cunning: mental.cunning,
      perception: mental.perception,
      # Spiritual
      willpower: spiritual.willpower,
      charisma: spiritual.charisma,
      faith: spiritual.faith
    },
    abilities: abilities,
    cost: rank + (abilities.length * 2),  # Simple cost calculation
    rarity: if rank >= 5 then "Rare" else if rank >= 3 then "Uncommon" else "Common"
  }
  
  say("Generated: ${clean_name} [${temperament}|${body_type}] {${terrain}} (${physical.power}/${physical.toughness}) (R${rank})")
  
  # Output detailed card information for evaluation
  say("  └─ ${background} ${microfaction} ${archetype} - ATK:${physical.power} HP:${physical.toughness} DEF:${physical.agility}")
  say("     Mental: INT:${mental.intelligence} CUN:${mental.cunning} PER:${mental.perception}")
  say("     Spirit: WIL:${spiritual.willpower} CHA:${spiritual.charisma} FAI:${spiritual.faith}")
  if abilities.length > 0
    abilities_list = ""
    i = 0
    while i < abilities.length
      abilities_list = abilities_list + abilities[i]
      if i < abilities.length - 1
        abilities_list = abilities_list + ", "
      end
      i = i + 1
    end
    say("     Abilities: ${abilities_list}")
  end
  say("     Cost: ${card.cost} | Rarity: ${card.rarity}")
  say("")
  
  card
end

# fun generate_black_creature()
#   # name = "BK-" + rand(1000).to_s
#   archetype = black_archetypes.sample
#   color = (black_colors + chaotic_colors).sample
#   rank = 1 + rand(5)  # Ranks 1-5
#   modifier = if rank >= 4 then adjectives.sample else ""
#   # full_name = if modifier != "" then "${modifier} ${name}" else name
#   
#   creature = create_creature(full_name, archetype, color, rank)
#   creature
# end

# Generate initial populations
white_army = []
white_archetypes = ["Knight", "Paladin", "Guardian", "Sentinel", "Crusader"]
black_army = []
black_archetypes = ["Shadow", "Wraith", "Reaver", "Necromancer", "Cultist"]

# Generate 5 creatures per faction for detailed evaluation
i = 0
while i < 5
  white_army = white_army + [generate_creature(white_colors, white_archetypes)]
  black_army = black_army + [generate_creature(black_colors, black_archetypes)]
  i = i + 1
end

say "Generated ${white_army.length} White creatures and ${black_army.length} Black creatures"

# Export cards to JSON - simplified approach
all_cards = white_army + black_army

# say "We have ${all_cards} cards"

# Simple JSON output - just show first card as example
if all_cards.length > 0
  sample_card = all_cards[0]
  say ""
  say "=== SAMPLE CARD JSON ==="
  say "{"
  say "  \"name\": \"${sample_card.name}\","
  say "  \"archetype\": \"${sample_card.archetype}\","
  say "  \"rank\": ${sample_card.rank},"
  say "  \"faction\": \"${sample_card.faction}\","
  say "  \"color\": \"${sample_card.color}\","
  say "  \"stats\": {"
  say "    \"attack\": ${sample_card.stats.attack},"
  say "    \"hp\": ${sample_card.stats.hp},"
  say "    \"defense\": ${sample_card.stats.defense},"
  say "    \"intelligence\": ${sample_card.stats.intelligence},"
  say "    \"cunning\": ${sample_card.stats.cunning},"
  say "    \"perception\": ${sample_card.stats.perception},"
  say "    \"willpower\": ${sample_card.stats.willpower},"
  say "    \"charisma\": ${sample_card.stats.charisma},"
  say "    \"faith\": ${sample_card.stats.faith}"
  say "  },"
  # Format abilities array properly
  abilities_str = "["
  i = 0
  while i < sample_card.abilities.length
    abilities_str = abilities_str + "\"" + sample_card.abilities[i] + "\""
    if i < sample_card.abilities.length - 1
      abilities_str = abilities_str + ", "
    end
    i = i + 1
  end
  abilities_str = abilities_str + "]"
  say "  \"abilities\": ${abilities_str},"
  say "  \"cost\": ${sample_card.cost},"
  say "  \"rarity\": \"${sample_card.rarity}\""
  say "}"
end

# Show some sample creatures with abilities
say ""
say "=== WHITE FACTION SAMPLES ==="
for i in [0, 1, 2] do
  creature = white_army[i]
  abilities_str = if creature.abilities.length > 0 then " [abilities]" else ""
  say("${creature.name} the ${creature.archetype} (R${creature.rank}) - ATK:${creature.stats.attack} HP:${creature.stats.hp} DEF:${creature.stats.defense}${abilities_str}")
end

say ""
say "=== BLACK FACTION SAMPLES ==="
for i in [0, 1, 2] do
  creature = black_army[i]
  abilities_str = if creature.abilities.length > 0 then " [abilities]" else ""
  say("${creature.name} the ${creature.archetype} (R${creature.rank}) - ATK:${creature.stats.attack} HP:${creature.stats.hp} DEF:${creature.stats.defense}${abilities_str}")
end

# Return summary instead of raw data
say ""
say "Creature generation complete. Ready for combat simulation."

